package net.sunxu.mybatis.automapper.processor.mapper.mapper;

import com.google.inject.Inject;
import com.google.inject.Provider;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import net.sunxu.mybatis.automapper.mapper.AutoMapper;
import net.sunxu.mybatis.automapper.processor.environment.Configuration;
import net.sunxu.mybatis.automapper.processor.environment.EnvironmentHelper;
import net.sunxu.mybatis.automapper.processor.mapper.MapperElementsCreator;
import net.sunxu.mybatis.automapper.processor.mapper.xml.XmlElement;
import net.sunxu.mybatis.automapper.processor.property.Type;
import net.sunxu.mybatis.automapper.processor.property.type.ProcessorRestrictProperty;

import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import java.util.*;
import java.util.stream.Collectors;

import static com.google.common.base.Strings.isNullOrEmpty;

public class MapperElementsCreatorsProvider implements Provider<Map<String, MapperElementsCreator>> {
    @Inject
    private EnvironmentHelper env;
    @Inject
    private MapperTypeFactory typeFactory;
    @Inject
    private Configuration configuration;
    @Inject
    private DecorateDirector director;

    @Override
    public Map<String, MapperElementsCreator> get() {
        List<TypeElement> typeElements = new ArrayList<>(getMapperTypeElements());
        Map<String, MapperElementsCreator> res = new HashMap<>(typeElements.size());
        for (TypeElement typeElement : typeElements) {
            MapperModel mapperModel = typeFactory.get(typeElement);
            if (isValid(mapperModel)) {
                MapperElementsCreator creator = getCreator(mapperModel);
                creator = director.decorate(creator, mapperModel);
                res.put(mapperModel.getName(), creator);
            }
        }
        if (typeElements.size() > 0) {
            MapperModel mapperModel = createAnnoymousMapper(
                    typeElements.iterator().next().getQualifiedName().toString());
            MapperElementsCreator creator = getCreator(mapperModel);
            creator = director.decorate(creator, mapperModel);
            res.put(mapperModel.getName(), creator);
        }
        return res;
    }

    private List<TypeElement> getMapperTypeElements() {
        return env.getElementsAnnotatedWith(AutoMapper.class).stream()
                .filter(e -> e.getKind() == ElementKind.INTERFACE)
                .map(e -> (TypeElement) e)
                .collect(Collectors.toList());
    }

    private boolean isValid(MapperModel mapperModel) {
        return !mapperModel.getType().contains(ProcessorRestrictProperty.class) ||
                mapperModel.getType().get(ProcessorRestrictProperty.class).isAllowed();
    }

    private MapperModel createAnnoymousMapper(String oneMapperName) {
        String annoymousMapperName = configuration.getDefaultAnnoymousMapper();
        if (isNullOrEmpty(annoymousMapperName)) {
            annoymousMapperName =
                    (oneMapperName.contains(".") ? getClassPackageName(oneMapperName) + "." : "") + "AnnoymousMapper";
            while (env.getTypeElement(annoymousMapperName) != null) {
                annoymousMapperName += "1";
            }
        }
        if (env.getTypeElement(annoymousMapperName) == null) {
            String packageName = getClassPackageName(annoymousMapperName);
            String simpleName = getClassSimpleName(annoymousMapperName);
            TypeSpec annoymousMapper = TypeSpec.interfaceBuilder(simpleName)
                    .addModifiers(Modifier.PUBLIC)
                    .build();
            JavaFile javaFile = JavaFile.builder(packageName, annoymousMapper)
                    .addFileComment(" Auto-generated by AutoMapper Processor for MyBatis to recognize.")
                    .build();
            env.saveJavaFile(javaFile);
        }

        final String annoymousMapperClassName = annoymousMapperName;
        MapperModel mapperModel = typeFactory.get(env.getTypeElement(EmptyInterfaceForAnnoymousMapper.class
                .getCanonicalName()));
        return new MapperModel() {
            @Override
            public Type getType() {
                return mapperModel.getType();
            }

            @Override
            public String getName() {
                return annoymousMapperClassName;
            }

            @Override
            public boolean isAnnoymousMapper() {
                return true;
            }

            @Override
            public Collection<MapperMethod> getMapperMethods() {
                return Collections.emptySet();
            }
        };
    }

    private interface EmptyInterfaceForAnnoymousMapper {}

    private String getClassPackageName(String className) {
        return className.contains(".") ? className.substring(0, className.lastIndexOf('.')) : "";
    }

    private String getClassSimpleName(String className) {
        return className.contains(".") ?
                className.substring(className.lastIndexOf('.') + 1, className.length()) :
                className;
    }

    private MapperElementsCreator getCreator(MapperModel mapperModel) {
        return new MapperElementsCreator() {
            @Override
            public List<XmlElement> getElements() {
                return new ArrayList<>();
            }

            @Override
            public String getName() {
                return mapperModel.getName();
            }
        };
    }
}
